<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random | Yuma Uchiumi</title>
    <link>https://yumaloop.github.io/category/random/</link>
      <atom:link href="https://yumaloop.github.io/category/random/index.xml" rel="self" type="application/rss+xml" />
    <description>Random</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© Yuma Uchiumi 2018-2021</copyright><lastBuildDate>Wed, 10 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://yumaloop.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>Random</title>
      <link>https://yumaloop.github.io/category/random/</link>
    </image>
    
    <item>
      <title>Tencent&#39;s Strategy for the ACG and the Impact on Japan</title>
      <link>https://yumaloop.github.io/post/2020-06-10-tencent-acg/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://yumaloop.github.io/post/2020-06-10-tencent-acg/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iZYT.usmZYtc/v0/740x-1.jpg&#34; alt=&#34;img000&#34; title=&#34;img000&#34;&gt;&lt;/p&gt;
&lt;p&gt;中国のTencentが日本のACG(Anime, Comics, Game)産業へ大きな関心を寄せているらしい．
すなわち，コンソールゲームの制作とヒットシリーズのフランチャイズに関する日本の専門知識を吸収しながら，
いくつかのスタジオを買収し，潜在的な投資について交渉中とのこと．詳細は下記記事を参照．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bloomberg.com/amp/news/articles/2020-06-09/tencent-targets-japan-anime-manga-to-jump-start-global-growth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tencent Targets Japan Anime, Manga to Jump-Start Global Growth (Bloomberg, June 9, 2020, 5:00 PM EDT)&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a GPU machine for Machine Learning</title>
      <link>https://yumaloop.github.io/post/2020-01-16-setup-gpu-machine-for-ml/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://yumaloop.github.io/post/2020-01-16-setup-gpu-machine-for-ml/</guid>
      <description>&lt;div class=&#39;pixels-photo&#39;&gt;
&lt;a href=&#39;https://500px.com/photo/1020504822/PicosDeEuropa-by-Kapan-Tay&#39; alt=&#39;Picos_De_Europa by Kapan Tay on 500px.com&#39;&gt;
  &lt;img src=&#39;https://drscdn.500px.org/photo/1020504822/m%3D900/v2?sig=e8cd1e4a2a70e4a800399c2bfba893fceb8d54699dcaf0ed8a62e1e9979c3f02&#39; alt=&#39;Picos_De_Europa by Kapan Tay on 500px.com&#39; /&gt;
&lt;/a&gt;
&lt;/div&gt;
&lt;script type=&#39;text/javascript&#39; src=&#39;https://500px.com/embed.js&#39;&gt;&lt;/script&gt;
&lt;p&gt;In this note, I describe how to install NVIDIA GPU and set up CUDA/cuDNN on Ubuntu 16.04LTS machine that has been clean booted. Also, I write down some linux commands used in debugging, since knowing your machine in detail would lead to resolving some errors related to the machine environment. This article could be updated from time to time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Example: My Ubuntu GPU machine (2020/01/10)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS :
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://releases.ubuntu.com/16.04/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu 16.04.6 LTS&lt;/a&gt; (GNU/Linux 4.4.0-145-generic x86_64)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAM(16GB) :
&lt;ul&gt;
&lt;li&gt;Memory: &lt;a href=&#34;https://www.newegg.com/kingston-8gb-288-pin-ddr4-sdram/p/N82E16820242069&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kingston 8GB 288-Pin DDR4 SDRAM DDR4 2133 (PC4 17000)&lt;/a&gt; x2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ROM(250GB):
&lt;ul&gt;
&lt;li&gt;SSD: &lt;a href=&#34;https://www.samsung.com/us/computing/memory-storage/solid-state-drives/mz-750250bw-mz-750250bw/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Samsung SSD 750 EVO 250GB&lt;/a&gt; (/dev/sda)&lt;/li&gt;
&lt;li&gt;HDD: &lt;a href=&#34;https://www.disctech.com/Seagate-Barracuda-2000GB-SATA-Hard-Drive-ST2000DM001&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seagate Barracuda ST2000DM001 Desktop SATA&lt;/a&gt; (/dev/sdb)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU(x8) :
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark/products/88196/intel-core-i7-6700-processor-8m-cache-up-to-4-00-ghz.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intel Core i7-6700 CPU @ 3.40GHz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GPU(x1) :
&lt;ul&gt;
&lt;li&gt;NVIDIA &lt;a href=&#34;https://www.nvidia.com/en-us/geforce/products/10series/geforce-gtx-1080/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geforce GTX 1080&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;NVIDIA CUDA : 10.0.130 (/usr/local/cuda-10.0/)&lt;/li&gt;
&lt;li&gt;NVIDIA cuDNN : 7.4.2.24 (/usr/lib/x86_64-linux-gnu/libcudnn.so.7.4.2)
&lt;ul&gt;
&lt;li&gt;Python3 : 3.6.9 (/usr/bin/python3.6)&lt;/li&gt;
&lt;li&gt;Python2 : 2.7.12 (/usr/bin/python)&lt;/li&gt;
&lt;li&gt;tensorflow 1.13.1 ($HOME/.local/lib/python3.6/site-packages)&lt;/li&gt;
&lt;li&gt;tensorflow-gpu 1.13.1 ($HOME/.local/lib/python3.6/site-packages)&lt;/li&gt;
&lt;li&gt;keras 2.2.4 ($HOME/.local/lib/python3.6/site-packages)&lt;/li&gt;
&lt;li&gt;pytorch 1.2.0 ($HOME/.local/lib/python3.6/site-packages)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;Table of contents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#OS&#34;&gt;Operating System&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#linux_os&#34;&gt;Checking Linux OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux_dist&#34;&gt;Checking Linux distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linux_kernel&#34;&gt;Checking Linux kernel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ROM&#34;&gt;Storage (ROM)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#rom_devices&#34;&gt;Checking ROM devices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rom_file&#34;&gt;Checking the number of files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rom_diskspace&#34;&gt;Checking disk space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ram&#34;&gt;Memory (RAM)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ram_devices&#34;&gt;Checking RAM devices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ram_memspace&#34;&gt;Checking memory space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cpu&#34;&gt;CPU&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#cpu_devices&#34;&gt;Checking CPU devices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#gpu&#34;&gt;GPU&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#gpu_devices&#34;&gt;Checking GPU devices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nvidia-cudacudnn&#34;&gt;NVIDIA driver &amp;amp; CUDA/cuDNN&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nvidia_nvidiadriver&#34;&gt;Installing NVIDIA driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nvidia_cuda&#34;&gt;Installing NVIDIA CUDA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nvidia_cuDNN&#34;&gt;Installing NVIDIA cuDNN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#------&#34;&gt;I/O&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#x11------------dm----&#34;&gt;Checking X11 display manager (DM)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;operating-system&#34;&gt;Operating System&lt;/h2&gt;
&lt;h5 id=&#34;checking-linux-os&#34;&gt;Checking Linux OS&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;uname&lt;/code&gt; command shows 1.OS Name, 2.Hostname, 3.Release, 4.Version, 5,Hardware Architecture, 6,CPU type, 7.Platform, 8.OS Name, respectively,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uname -a
Linux XXXX 4.4.0-145-generic #171-Ubuntu SMP Tue Mar 26 12:43:40 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux

&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;checking-linux-distribution&#34;&gt;Checking Linux distribution&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;/etc/issue&lt;/code&gt; contains information about Linux distribution.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/issue
Ubuntu 16.04.6 LTS \n \l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/etc/lsb-release&lt;/code&gt; contains the same information.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=16.04 DISTRIB_CODENAME=xenial 
DISTRIB_DESCRIPTION=&amp;quot;Ubuntu 16.04.6 LTS&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/etc/os-release&lt;/code&gt; contains the same information.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/os-release
NAME=“Ubuntu”
VERSION=“16.04.6 LTS (Xenial Xerus)” ID=ubuntu ID_LIKE=debian PRETTY_NAME=“Ubuntu 16.04.6 LTS” VERSION_ID=“16.04&amp;quot; HOME_URL=“http://www.ubuntu.com/” SUPPORT_URL=“http://help.ubuntu.com/” BUG_REPORT_URL=“http://bugs.launchpad.net/ubuntu/” VERSION_CODENAME=xenial UBUNTU_CODENAME=xenial
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;checking-linux-kernel&#34;&gt;Checking Linux kernel&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;/proc/version&lt;/code&gt; contains information about Linux kernel.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /proc/version
Linux version 4.4.0-159-generic (buildd@lgw01-amd64-042) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.10) ) #187-Ubuntu SMP Thu Aug 1 16:28:06 UTC 2019
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;storage-rom&#34;&gt;Storage (ROM)&lt;/h2&gt;
&lt;p&gt;Storage device (HDD, SSD) and file systems.&lt;/p&gt;
&lt;h5 id=&#34;checking-rom-devices&#34;&gt;Checking ROM devices&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;df&lt;/code&gt; commad shows information about ROM (HDD) devices&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ df -h
Filesystem      Size  Used Avail Use% Mounted on
udev            7.8G     0  7.8G   0% /dev
tmpfs           1.6G   46M  1.6G   3% /run
/dev/sda1       214G  165G   39G  81% /
tmpfs           7.9G  208K  7.9G   1% /dev/shm
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           7.9G     0  7.9G   0% /sys/fs/cgroup
/dev/loop3      384K  384K     0 100% /snap/patchelf/93
/dev/loop1      384K  384K     0 100% /snap/patchelf/87
none            7.9G  2.5M  7.9G   1% /tmp/guest-qyuodw
tmpfs           1.6G   64K  1.6G   1% /run/user/998
/dev/loop4       90M   90M     0 100% /snap/core/8213
/dev/loop0       90M   90M     0 100% /snap/core/8268
tmpfs           1.6G     0  1.6G   0% /run/user/1001
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;checking-the-number-of-files&#34;&gt;Checking the number of files&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;wc&lt;/code&gt; command shows the number of files under the current dir.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ du -hsc *
689M	Research
4.0K	build
106M	dataset
4.0K	docker
9.3M	gym
50M	kaggle
2.6M	latent.gif
2.0G	opencv
122G	workspace
4.0K	ダウンロード
4.0K	テンプレート
4.0K	デスクトップ
4.0K	ドキュメント
4.0K	ビデオ
4.0K	ピクチャ
4.0K	ミュージック
4.0K	公開
125G	合計
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;ファイルのディスク使用量を確認したい&#34;&gt;ファイルのディスク使用量を確認したい&lt;/h5&gt;
&lt;p&gt;df -hコマンドを使う&lt;/p&gt;
&lt;p&gt;カレントディレクトリ直下にあるファイルおよびディレクトリのディスク使用量とその合計を表示する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ du -hsc *
689M	Research
4.0K	build
106M	dataset
4.0K	docker
9.3M	gym
50M	kaggle
2.6M	latent.gif
2.0G	opencv
122G	workspace
4.0K	ダウンロード
4.0K	テンプレート
4.0K	デスクトップ
4.0K	ドキュメント
4.0K	ビデオ
4.0K	ピクチャ
4.0K	ミュージック
4.0K	公開
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;メモリram&#34;&gt;メモリ（RAM）&lt;/h2&gt;
&lt;h5 id=&#34;メモリデバイスを確認したい&#34;&gt;メモリデバイスを確認したい&lt;/h5&gt;
&lt;p&gt;/proc/meminfoをみる&lt;/p&gt;
&lt;p&gt;メモリの詳細情報が表示される&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /proc/meminfo
MemTotal: 16377200 kB
MemFree: 3077848 kB
MemAvailable: 15767804 kB
Buffers: 363052 kB
Cached: 12274992 kB
SwapCached: 66936 kB
Active: 8048088 kB
Inactive: 4689560 kB
Active(anon): 25860 kB
Inactive(anon): 86584 kB
...
HugePages_Total: 0
HugePages_Free: 0
HugePages_Rsvd: 0
HugePages_Surp: 0
Hugepagesize: 2048 kB
DirectMap4k: 1907316 kB
DirectMap2M: 14815232 kB
DirectMap1G: 0 kB
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;メモリの空き容量を確認したい&#34;&gt;メモリの空き容量を確認したい&lt;/h5&gt;
&lt;p&gt;freeコマンドを使う&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ free
              total        used        free      shared  buff/cache   available
Mem:       16377148     2470228      314496       17140    13592424    13460232
Swap:      16720892      431568    16289324
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vmstatコマンドを使う&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vmstat
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0 431584 267696 944212 12638044    0    2   389    15    0    0  6  2 91  0  0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;topコマンドを使う&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ top
top - 15:55:05 up 64 days, 23:12,  5 users,  load average: 1.00, 1.04, 1.07
Tasks: 232 total, 2 running, 230 sleeping, 0 stopped, 0 zombie
%Cpu(s): 9.1 us, 3.5 sy, 0.0 ni, 86.9 id, 0.5 wa, 0.0 hi, 0.0 si, 0.0 st
KiB Mem : 16377148 total,   271964 free,  2527528 used, 13577656 buff/cache
KiB Swap: 16720892 total, 16289228 free,   431664 used. 13403420 avail Mem 

...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cpu&#34;&gt;CPU&lt;/h2&gt;
&lt;h5 id=&#34;cpuデバイスを確認したい&#34;&gt;CPUデバイスを確認したい&lt;/h5&gt;
&lt;p&gt;/proc/cpuinfoをみる&lt;/p&gt;
&lt;p&gt;CPUのコアごとに詳細情報が表示される&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
$ cat /proc/cpuinfo
processor : 0
vendor_id : GenuineIntel
cpu family : 6
model : 94
model name : Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz
stepping : 3
microcode : 0xc6
cpu MHz : 800.062
cache size : 8192 KB
physical id : 0
siblings : 8
...
processor : 1
vendor_id : GenuineIntel
cpu family : 6
model : 94
model name : Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;gpu&#34;&gt;GPU&lt;/h2&gt;
&lt;h5 id=&#34;gpuデバイスの確認&#34;&gt;GPUデバイスの確認&lt;/h5&gt;
&lt;p&gt;lswsコマンドを使う&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo lshw -C display 
  *-display               
       詳細: VGA compatible controller
       製品: GP104 [GeForce GTX 1080]
       ベンダー: NVIDIA Corporation
       物理ID: 0
       バス情報: pci@0000:01:00.0
       バージョン: a1
       幅: 64 bits
       クロック: 33MHz
       性能: pm msi pciexpress vga_controller bus_master cap_list rom
       設定: driver=nvidia latency=0
       リソース: irq:317 メモリー:de000000-deffffff メモリー:c0000000-cfffffff メモリー:d0000000-d1ffffff IOポート:e000(サイズ=128) メモリー:df000000-df07ffff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;lspciコマンドを使う&lt;/p&gt;
&lt;p&gt;Linuxに搭載されているPCIバスの情報を表示する．&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lspci | grep -i nvidia
01:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)
01:00.1 Audio device: NVIDIA Corporation GP104 High Definition Audio Controller (rev a1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;nvidiaドライバとcudacudnnの導入&#34;&gt;NVIDIAドライバとCUDA/cuDNNの導入&lt;/h2&gt;
&lt;h5 id=&#34;nvidiaドライバのインストール&#34;&gt;NVIDIAドライバのインストール&lt;/h5&gt;
&lt;p&gt;1.下記リンクから，自分のGPUにあうドライバを検索してダウンロードする．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nvidia.co.jp/Download/index.aspx?lang=jp&#34;&gt;https://www.nvidia.co.jp/Download/index.aspx?lang=jp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh4.googleusercontent.com/m4MAKmekqihk5pqTUHLojPX6uzAZoaGoj2d9EazHOSlVxNuradgm_lF-7piupC_j1dBf-PffJ2e1SaDxf215GddSYx_XdaUAyUkucebB5SSyN9ZrGUl7qeqFe0aUxnnBqQxYYeK7&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;たとえば，GPU「&lt;a href=&#34;http://d.hatena.ne.jp/keyword/NVIDIA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NVIDIA&lt;/a&gt; &lt;a href=&#34;http://d.hatena.ne.jp/keyword/GeForce&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GeForce&lt;/a&gt; 1080」に対応したドライバは以下のようになる．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/e951y4mwYumub525KR2Um_Cqbb6NxYIpnyThgMyIcClu7nvwHUzF5hGK5l3_4k0lPxf9T9uF33u-0t0cTJeovZFNsjXJkBBzCM1B61i4Kk8_xIBSsTWT0oUexsNDx5_QRFrIDIIj&#34; alt=&#34;img&#34;&gt;．&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;新しく&lt;a href=&#34;http://d.hatena.ne.jp/keyword/GPU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GPU&lt;/a&gt;ドライバ（&lt;a href=&#34;http://d.hatena.ne.jp/keyword/NVIDIA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NVIDIA&lt;/a&gt;ドライバ）をインストールする前に，既にインストールされている&lt;a href=&#34;http://d.hatena.ne.jp/keyword/GPU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GPU&lt;/a&gt;ドライバを確認する．&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;aptにNVIDIAドライバを提供しているxorg-edgersレポジトリを追加する．&lt;/p&gt;
&lt;p&gt;aptでNVIDIAドライバ「nvidia-396」をインストールして，マシンを再起動．&lt;/p&gt;
&lt;h2 id=&#34;cudaのインストール&#34;&gt;CUDAのインストール&lt;/h2&gt;
&lt;p&gt;（注意）CUDA・cuDNN・tensorFlow-gpuのバージョンを合わせる必要がある．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CUDAの公式ドキュメントをよく読む．&lt;/p&gt;
&lt;p&gt;CUDA Toolkit Documentation &lt;a href=&#34;https://docs.nvidia.com/cuda/index.html&#34;&gt;https://docs.nvidia.com/cuda/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下記リンクから，NVIDIAドライバに対応するCUDAのバージョンを確認する&lt;/p&gt;
&lt;p&gt;CUDA Toolkit Documentation &amp;gt; Release Notes &amp;gt; 1. CUDA Toolkit Major Components &amp;gt; CUDA Driver &lt;a href=&#34;https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html&#34;&gt;https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/s8gpeKo-VZlCtUROQc6YG1L3ZQ9aJlggnswp_mAAxRFua_Sh0ILtYsa-K4uUYWrjbfgz21EIVJwSrt-StpbGhvpPrxUytW-Xjy146HAo7pmo-SyPT6cP5-YPSFWRHHASmR9xyFon&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;下記リンクから，tensorflow-&lt;a href=&#34;http://d.hatena.ne.jp/keyword/gpu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gpu&lt;/a&gt;に対応するcuDNN/CUDAのバージョンを確認する&lt;/p&gt;
&lt;p&gt;TensorFlow (Linux) - テスト済みのビルド設定&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tensorflow.org/install/source#linux&#34;&gt;https://www.tensorflow.org/install/source#linux&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/LrKW-yUDWLZi5-iq1oz0BB_3dpt3hin3yLEyo8V1QtJzV958tWDaYr5RDwJsOniMxotiNqZsCcYa4-kqs3SdSLd7xzD9ABON4b2MT9kIHPbbnL3lP9GcgZpFRTWjVThXPuQMQNUP&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;CUDA・cuDNN・tensorFlow-gpuのバージョン確認を終えた．&lt;/p&gt;
&lt;p&gt;今回は，以下で環境構築をする．&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/keyword/Python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt; 3.6.9&lt;/li&gt;
&lt;li&gt;tensorflow-&lt;a href=&#34;http://d.hatena.ne.jp/keyword/gpu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gpu&lt;/a&gt; 1.13.1&lt;/li&gt;
&lt;li&gt;CUDA 10.0&lt;/li&gt;
&lt;li&gt;cuDNN 7.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;下記リンクから，自分の環境にあった「CUDA Toolkitパッケージ」を確認し，マシンへダウンロードする．&lt;/p&gt;
&lt;p&gt;CUDA Toolkit Archive &lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit-archive&#34;&gt;https://developer.nvidia.com/cuda-toolkit-archive&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/6Wg51qcEzuCZ326X81F_48j0pU20MC4qKa0CU847Vw612vZQNUP302zFYWCJ9CA5uKABt6UU7UTLj8M6Kr9ndYKNzT-amTFv3hiWGDakR5gpjFlA3lppzcU-dORL0ojBI6qs-Pv5&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;今回は，CUDA10.0で，マシンの環境として，以下を選択．&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Operating System: Linux&lt;/li&gt;
&lt;li&gt;Architecture: x86_64&lt;/li&gt;
&lt;li&gt;Distribution: Ubuntu&lt;/li&gt;
&lt;li&gt;Version: 16.04&lt;/li&gt;
&lt;li&gt;Installer Type: deb [network]&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://lh6.googleusercontent.com/qkrUa2T8IaJ7IflSrZ6XCyDvHqmoP868EnpDlqOoSoYiMcse_8xteV7gEUsmAS_2GCr7GWUI_rClrw7E6i3RuKUKghWm-L5fT8vST6r9CnCHBtxwIS5LvB18ZfMY1Aet173jSWzC&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;（注意）https://developer.nvidia.com/cuda-downloadsは，最新バージョンのダウンロードリンクなので，ここから安易にCUDAをダウンロードしてはいけない．特に，tensorflow-&lt;a href=&#34;http://d.hatena.ne.jp/keyword/gpu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gpu&lt;/a&gt;は，最新のCUDA Toolkitに対応していないので注意する．CUDAとTensorflow-&lt;a href=&#34;http://d.hatena.ne.jp/keyword/gpu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gpu&lt;/a&gt;のバージョンがあっていないと，たとえばImportError: libcublas.so.10.0が発生する．&lt;/p&gt;
&lt;p&gt;対応するCUDA Toolkit（CUDA 10.0）の.&lt;a href=&#34;http://d.hatena.ne.jp/keyword/deb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deb&lt;/a&gt;ファイル(network)は「cuda-repo-ubuntu1604_10.0.130-1_&lt;a href=&#34;http://d.hatena.ne.jp/keyword/amd64&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;amd64&lt;/a&gt;.&lt;a href=&#34;http://d.hatena.ne.jp/keyword/deb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deb&lt;/a&gt;」となる． この.&lt;a href=&#34;http://d.hatena.ne.jp/keyword/deb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deb&lt;/a&gt;ファイルをwgetコマンドを使って，マシンへダウンロードする．&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;ダウンロードしたCUDA Toolkitパッケージ(.deb)を，マシンへインストールする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;dpkgコマンドでCUDA Toolkitパッケージ(.deb)をcudaパッケージとして保存します．さらに，aptコマンドでcudaパッケージをインストールします． 注意：公式に書かれているsudo apt-get install cudaを実行すると自動的に最新版のCUDAがインストールされる．&lt;/p&gt;
&lt;p&gt;これでCUDA Toolkit（CUDA 10.0）のインストールは完了．&lt;/p&gt;
&lt;p&gt;次に，&lt;a href=&#34;http://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;環境変数&lt;/a&gt;（PATH）を設定する．&lt;/p&gt;
&lt;h5 id=&#34;cudnnのインストール&#34;&gt;cuDNNのインストール&lt;/h5&gt;
&lt;h5 id=&#34;pathチェック&#34;&gt;PATHチェック&lt;/h5&gt;
&lt;h2 id=&#34;ディスプレイ&#34;&gt;ディスプレイ&lt;/h2&gt;
&lt;h5 id=&#34;x11ディスプレイマネージャdmを確認&#34;&gt;X11ディスプレイマネージャ(DM)を確認&lt;/h5&gt;
&lt;p&gt;/etc/X11/default-display-managerをみる&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Whiteside&#39;s Outline Method</title>
      <link>https://yumaloop.github.io/post/2019-11-25-whitesides_outline_method/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://yumaloop.github.io/post/2019-11-25-whitesides_outline_method/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gmwgroup.harvard.edu/people/george-m-whitesides&#34;&gt;Prof. George M. Whitesides&lt;/a&gt; is a top-level researcher on chemistry and also known as one of the highest h-index researchers in the world. He explains his unique writing techniques called Outline Method in the article, &lt;a href=&#34;https://www.tulane.edu/~lamp/whiteside.pdf&#34;&gt;&amp;ldquo;Whitesides&#39; Group: Writing a Paper&amp;rdquo;&lt;/a&gt;. I&amp;rsquo;ve translated that into Japanese and publish it here.&lt;/p&gt;
&lt;h2 id=&#34;original-paper&#34;&gt;Original paper&lt;/h2&gt;
&lt;object data=&#34;https://www.tulane.edu/~lamp/whiteside.pdf&#34; type=&#34;application/pdf&#34; width=&#34;100%&#34; height=&#34;800px&#34;&gt;
    &lt;embed src=&#34;https://www.tulane.edu/~lamp/whiteside.pdf&#34;&gt;
        &lt;p&gt;This browser does not support PDFs. Please download the PDF to view it: &lt;a href=&#34;https://www.tulane.edu/~lamp/whiteside.pdf&#34;&gt;Download PDF&lt;/a&gt;.&lt;/p&gt;
    &lt;/embed&gt;
&lt;/object&gt;
&lt;br&gt;
&lt;h2 id=&#34;japanese--translation&#34;&gt;Japanese  translation&lt;/h2&gt;
&lt;object data=&#34;{{ site.baseurl }}/assets/pdf/whiteside_outline_method_jp.pdf&#34; type=&#34;application/pdf&#34; width=&#34;100%&#34; height=&#34;800px&#34;&gt;
    &lt;embed src=&#34;{{ site.baseurl }}/assets/pdf/whiteside_outline_method_jp.pdf&#34;&gt;
        &lt;p&gt;This browser does not support PDFs. Please download the PDF to view it: &lt;a href=&#34;{{ site.baseurl }}/assets/pdf/whiteside_outline_method_jp.pdf&#34;&gt;Download PDF&lt;/a&gt;.&lt;/p&gt;
    &lt;/embed&gt;
&lt;/object&gt;
</description>
    </item>
    
    <item>
      <title>Automatically Login to keio.jp using Selenium on Python</title>
      <link>https://yumaloop.github.io/post/2019-06-21-keiojp-auto-login/</link>
      <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://yumaloop.github.io/post/2019-06-21-keiojp-auto-login/</guid>
      <description>&lt;p&gt;Have you ever want to login to keio.jp automatically? Don&amp;rsquo;t you think it is cool? At least I think so and I write down the way to achieve that with Python.&lt;/p&gt;
&lt;br&gt;
&lt;div style=&#34;text-align:center&#34;&gt;
  &lt;video style=&#34;width: 100%;&#34; controls autoplay loop muted&gt;
    &lt;source src=&#34;{{ &#34;/assets/video/keio_login.mp4&#34; | relative_url }}&#34; type=&#34;video/mp4&#34;&gt;
    &lt;p&gt;Your browser does not support the video tag.&lt;/p&gt;
  &lt;/video&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;In order to login to keio.jp (Keio Single Sign-On System), it is necessary to satisfy the page transition as below.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://auth.keio.jp&#34;&gt;https://auth.keio.jp&lt;/a&gt; (SSO login page)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gslbs.adst.keio.ac.jp/student/index.html&#34;&gt;https://gslbs.adst.keio.ac.jp/student/index.html&lt;/a&gt; (Syllabus page)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.edu.keio.jp/ess2/login?&#34;&gt;https://www.edu.keio.jp/ess2/login?&lt;/a&gt; (Class support page)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, this time, a static web-scraping library like BeautifulSoup is not enough, because it doesn&amp;rsquo;t support the dynamic site with Javascript or page redirection. Then I use &lt;a href=&#34;https://selenium.dev/documentation/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Selenium&lt;/a&gt; and &lt;a href=&#34;http://chromedriver.chromium.org/getting-started&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ChromeDriver&lt;/a&gt; in python.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;example-1--auto-login-to-keiojp&#34;&gt;Example 1 : Auto login to keio.jp&lt;/h4&gt;
&lt;p&gt;If you are the student in Keio University, you can login to keio.jp automatically. All you need is to assign your email address and password in the below script and run it in command line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

ID = &amp;quot;*****&amp;quot; # your email in keio.jp (ex. example@keio.jp)  #
PW = &amp;quot;*****&amp;quot; # your password in keio.jp #

# Optional settings of chrome driver
options = webdriver.ChromeOptions()
options.add_argument(&#39;--headless&#39;)

# Boot chrome driver
driver = webdriver.Chrome(&amp;quot;/usr/local/bin/chromedriver&amp;quot;, options=options)
driver.set_page_load_timeout(15) # Time out 15 sec

# GET (HTML Page)
driver.get(&amp;quot;https://auth.keio.jp&amp;quot;)

# Find elements and POST (send keys to the input tag)
id_element = driver.find_element_by_name(&amp;quot;j_username&amp;quot;)
id_element.send_keys(ID)
pw_element = driver.find_element_by_name(&amp;quot;j_password&amp;quot;)
pw_element.send_keys(PW)

# Click login button
login_button = driver.find_element_by_name(&amp;quot;_eventId_proceed&amp;quot;)
login_button.click()

# GET (HTML Page)
driver.get(&amp;quot;https://gslbs.adst.keio.ac.jp/student/index.html&amp;quot;)

# GET (HTML Page)
driver.get(&amp;quot;https://www.edu.keio.jp/ess2/login?&amp;quot;)

# Close chrome driver
driver.quit()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h4 id=&#34;example-2--auto-login-to-twittercom&#34;&gt;Example 2 : Auto login to twitter.com&lt;/h4&gt;
&lt;p&gt;If you have twitter account, you can also login to twitter.com automatically. All you need is to assign your username (@********) and password (********) in the below script and run it in command line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

USERNAME=&amp;quot;*****&amp;quot; # your username in twitter #
PASSWORD=&amp;quot;*****&amp;quot; # your password in twitter #

# Optional settings of chrome driver
options = webdriver.ChromeOptions()
options.add_argument(&#39;--headless&#39;)

# Boot chrome driver
driver = webdriver.Chrome(&amp;quot;/usr/local/bin/chromedriver&amp;quot;, options=options)
driver.set_page_load_timeout(15) # Time out 15 sec

# GET (HTML Page)
driver.get(&amp;quot;https://twitter.com/login&amp;quot;)

# Find elements and POST (send keys to the input tag)
username_element = driver.find_element_by_class_name(&#39;js-username-field&#39;)
username_element.send_keys(USERNAME)
password_element = driver.find_element_by_class_name(&#39;js-password-field&#39;)
password_element.send_keys(PASSWORD)

# Click login button
login_button = driver.find_element_by_css_selector(&#39;button.submit.EdgeButton.EdgeButton--primary.EdgeButtom--medium&#39;)
login_button.click()

# Close chrome driver
driver.quit()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h4 id=&#34;example-3--auto-search-in-googlecom&#34;&gt;Example 3 : Auto search in google.com&lt;/h4&gt;
&lt;p&gt;If you refer to Selenium Getting started guide, you can aquire the search result with the keyword &amp;ldquo;cheese&amp;rdquo; at google.com with Selenium on Python. (This requires Selenium WebDriver 3.13 or newer.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.expected_conditions import presence_of_element_located

# Open web driver (Google Chrome)
driver = webdriver.Firefox()

wait = WebDriverWait(driver, 10) 

# GET HTML page source of google.com
driver.get(&amp;quot;https://google.com/ncr&amp;quot;) # GET 
# POST the keyword &amp;quot;cheese&amp;quot; in &amp;quot;q&amp;quot; element in google.com
driver.find_element_by_name(&amp;quot;q&amp;quot;).send_keys(&amp;quot;cheese&amp;quot; + Keys.RETURN) # POST 

first_result = wait.until(presence_of_element_located((By.CSS_SELECTOR, &amp;quot;h3&amp;gt;div&amp;quot;)))

# Search result as text
print(first_result.get_attribute(&amp;quot;textContent&amp;quot;))

# Close web driver (Google Chrome)
driver.quit()
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Selenium Browser Automation Project &amp;gt; Getting started &amp;gt; Quick tour&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://selenium.dev/documentation/en/getting_started/quick/#webdriver&#34;&gt;https://selenium.dev/documentation/en/getting_started/quick/#webdriver&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
